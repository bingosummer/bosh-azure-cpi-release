<%=
  params = {
    'cloud' => {
      'plugin' => 'azure',
      'properties' => {
        'azure' => {
          'environment' => p('azure.environment'),
          'subscription_id' => p('azure.subscription_id'),
          'resource_group_name' => p('azure.resource_group_name'),
          'tenant_id' => p('azure.tenant_id'),
          'client_id' => p('azure.client_id'),
          'client_secret' => p('azure.client_secret'),
          'ssh_user' => p('azure.ssh_user'),
          'parallel_upload_thread_num' => p('azure.parallel_upload_thread_num'),
          'default_security_group' => p('azure.default_security_group'),
          'debug_mode' => p('azure.debug_mode'),
          'use_managed_disks' => p('azure.use_managed_disks')
        },
        'registry' => {
          'user' => p('registry.username'),
          'password' => p('registry.password'),
          'address' => p('registry.host'),
          'http' => {
            'port' => p('registry.port'),
            'user' => p('registry.username'),
            'password' => p('registry.password')
          }
        },
        'agent' => {
          'ntp' => p('ntp')
        }
      }
    }
  }

  if_p('azure.storage_account_name') do |storage_account_name|
    params['cloud']['properties']['azure']['storage_account_name'] = storage_account_name
  end.else do
    if p('azure.use_managed_disks') == false
      raise 'storage_account_name cannot be nil if use_managed_disks is false. Please read https://bosh.io/docs/azure-cpi.html.'
    end
  end

  if_p('registry.endpoint') do |endpoint|
    params['cloud']['properties']['registry']['endpoint'] = endpoint
  end.else do
    params['cloud']['properties']['registry']['endpoint'] = "http://#{p('registry.username')}:#{p('registry.password')}@#{p('registry.host')}:#{p('registry.port')}"
  end

  if_p('azure.ssh_public_key') do |ssh_public_key|
    params['cloud']['properties']['azure']['ssh_public_key'] = ssh_public_key
  end.else do
    raise 'ssh_certificate has been replaced by ssh_public_key. Please read https://bosh.io/docs/azure-cpi.html.'
  end

  windows = p('azure.windows')
  username = windows['username']
  password = windows['password']
  unless username.nil? && password.nil?
    raise 'Both "username" and "password" must be set for Windows' if username.nil? || username.empty? || password.nil? || password.empty?
    params['cloud']['properties']['azure']['windows'] = {}
    params['cloud']['properties']['azure']['windows']['username'] = username
    params['cloud']['properties']['azure']['windows']['password'] = password
  end

  if p('azure.environment') == 'AzureStack'
    if_p('azure.azure_stack_domain') do |domain|
      raise 'The AzureStack domain can not be empty' if domain.empty?
      params['cloud']['properties']['azure']['azure_stack_domain'] = p('azure.azure_stack_domain')
    end.else do
      raise 'You must provide a domain for AzureStack'
    end

    if_p('azure.azure_stack_authentication') do |authentication|
      raise 'The AzureStack authentication can not be empty' if authentication.empty?
      params['cloud']['properties']['azure']['azure_stack_authentication'] = p('azure.azure_stack_authentication')
    end.else do
      raise 'You must provide a authentication for AzureStack'
    end

    if_p('azure.azure_stack_resource') do |resource|
      raise 'The AzureStack resource can not be empty' if resource.empty?
      params['cloud']['properties']['azure']['azure_stack_resource'] = p('azure.azure_stack_resource')
    end.else do
      raise 'You must provide a resource for AzureStack'
    end

    params['cloud']['properties']['azure']['azure_stack_endpoint_prefix'] = p('azure.azure_stack_endpoint_prefix')
  end

  if_p('blobstore') do
    blobstore_params = {
      'provider' => p('blobstore.provider')
    }
    if p('blobstore.provider') == 's3'
      options_params = {
        'bucket_name' => p('blobstore.bucket_name'),
        'access_key_id' => p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']),
        'secret_access_key' => p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'])
      }
      def update_blobstore_options(options, manifest_key, rendered_key=manifest_key)
        value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
        options[rendered_key] = value unless value.nil?
      end
      update_blobstore_options(options_params, 'use_ssl')
      update_blobstore_options(options_params, 's3_port', 'port')
      update_blobstore_options(options_params, 'host')
      update_blobstore_options(options_params, 's3_force_path_style')
    elsif p('blobstore.provider') == 'local'
      options_params = {
        'blobstore_path' => p('blobstore.path')
      }
    else
      options_params = {
        'endpoint' => "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}",
        'user' => p('blobstore.agent.user'),
        'password' => p('blobstore.agent.password')
      }
    end
    blobstore_params['options'] = options_params
    params['cloud']['properties']['agent']['blobstore'] = blobstore_params
  end
  if_p('agent.mbus') do |mbus|
    params['cloud']['properties']['agent']['mbus'] = mbus
  end.else_if_p('nats') do
    params['cloud']['properties']['agent']['mbus'] = "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
  end
  
  JSON.dump(params)
%>
